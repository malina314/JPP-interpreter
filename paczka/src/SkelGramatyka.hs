-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelGramatyka where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsGramatyka

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsGramatyka.Ident -> Result
transIdent x = case x of
  AbsGramatyka.Ident string -> failure x

transProgram :: Show a => AbsGramatyka.Program' a -> Result
transProgram x = case x of
  AbsGramatyka.Program _ topdefs -> failure x

transTopDef :: Show a => AbsGramatyka.TopDef' a -> Result
transTopDef x = case x of
  AbsGramatyka.VarDef _ type_ item -> failure x
  AbsGramatyka.FnDef _ type_ ident args block -> failure x

transArg :: Show a => AbsGramatyka.Arg' a -> Result
transArg x = case x of
  AbsGramatyka.Arg _ type_ ident -> failure x
  AbsGramatyka.ArgVar _ type_ ident -> failure x

transBlock :: Show a => AbsGramatyka.Block' a -> Result
transBlock x = case x of
  AbsGramatyka.Block _ stmts -> failure x

transStmt :: Show a => AbsGramatyka.Stmt' a -> Result
transStmt x = case x of
  AbsGramatyka.Empty _ -> failure x
  AbsGramatyka.BStmt _ block -> failure x
  AbsGramatyka.Decl _ type_ item -> failure x
  AbsGramatyka.Ass _ ident expr -> failure x
  AbsGramatyka.Ret _ expr -> failure x
  AbsGramatyka.Cond _ expr stmt -> failure x
  AbsGramatyka.CondElse _ expr stmt1 stmt2 -> failure x
  AbsGramatyka.While _ expr stmt -> failure x
  AbsGramatyka.SExp _ expr -> failure x

transItem :: Show a => AbsGramatyka.Item' a -> Result
transItem x = case x of
  AbsGramatyka.NoInit _ ident -> failure x
  AbsGramatyka.Init _ ident expr -> failure x

transType :: Show a => AbsGramatyka.Type' a -> Result
transType x = case x of
  AbsGramatyka.Int _ -> failure x
  AbsGramatyka.Str _ -> failure x
  AbsGramatyka.Bool _ -> failure x

transExpr :: Show a => AbsGramatyka.Expr' a -> Result
transExpr x = case x of
  AbsGramatyka.EVar _ ident -> failure x
  AbsGramatyka.ELitInt _ integer -> failure x
  AbsGramatyka.ELitTrue _ -> failure x
  AbsGramatyka.ELitFalse _ -> failure x
  AbsGramatyka.EApp _ ident exprs -> failure x
  AbsGramatyka.EString _ string -> failure x
  AbsGramatyka.Neg _ expr -> failure x
  AbsGramatyka.Not _ expr -> failure x
  AbsGramatyka.EMul _ expr1 mulop expr2 -> failure x
  AbsGramatyka.EAdd _ expr1 addop expr2 -> failure x
  AbsGramatyka.ERel _ expr1 relop expr2 -> failure x
  AbsGramatyka.EAnd _ expr1 expr2 -> failure x
  AbsGramatyka.EOr _ expr1 expr2 -> failure x

transAddOp :: Show a => AbsGramatyka.AddOp' a -> Result
transAddOp x = case x of
  AbsGramatyka.Plus _ -> failure x
  AbsGramatyka.Minus _ -> failure x

transMulOp :: Show a => AbsGramatyka.MulOp' a -> Result
transMulOp x = case x of
  AbsGramatyka.Times _ -> failure x
  AbsGramatyka.Div _ -> failure x
  AbsGramatyka.Mod _ -> failure x

transRelOp :: Show a => AbsGramatyka.RelOp' a -> Result
transRelOp x = case x of
  AbsGramatyka.LTH _ -> failure x
  AbsGramatyka.LE _ -> failure x
  AbsGramatyka.GTH _ -> failure x
  AbsGramatyka.GE _ -> failure x
  AbsGramatyka.EQU _ -> failure x
  AbsGramatyka.NE _ -> failure x
