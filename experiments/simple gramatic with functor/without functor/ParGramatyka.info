-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from ParGramatyka.y
-----------------------------------------------------------------------------


rule 7 is unused
rule 8 is unused
rule 9 is unused
rule 10 is unused
rule 11 is unused
rule 12 is unused
rule 13 is unused
rule 22 is unused
rule 23 is unused
rule 24 is unused
rule 25 is unused

terminal '+' is unused
terminal ',' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Ident -> L_Ident                                   (1)
	Integer -> L_integ                                 (2)
	Program -> ListTopDef                              (3)
	TopDef -> 'global' Type Item ';'                   (4)
	ListTopDef -> TopDef                               (5)
	ListTopDef -> TopDef ListTopDef                    (6)
	Arg -> Type Ident                                  (7)
	ListArg ->                                         (8)
	ListArg -> Arg                                     (9)
	ListArg -> Arg ',' ListArg                         (10)
	Stmt -> ';'                                        (11)
	Stmt -> Type Item ';'                              (12)
	Stmt -> Ident '=' Expr ';'                         (13)
	Item -> Ident                                      (14)
	Item -> Ident '=' Expr                             (15)
	Type -> 'int'                                      (16)
	Type -> 'bool'                                     (17)
	Expr -> Ident                                      (18)
	Expr -> Integer                                    (19)
	Expr -> 'true'                                     (20)
	Expr -> 'false'                                    (21)
	ListExpr ->                                        (22)
	ListExpr -> Expr                                   (23)
	ListExpr -> Expr ',' ListExpr                      (24)
	AddOp -> '+'                                       (25)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'+'            { PT _ (TS _ 1) }
	','            { PT _ (TS _ 2) }
	';'            { PT _ (TS _ 3) }
	'='            { PT _ (TS _ 4) }
	'bool'         { PT _ (TS _ 5) }
	'false'        { PT _ (TS _ 6) }
	'global'       { PT _ (TS _ 7) }
	'int'          { PT _ (TS _ 8) }
	'true'         { PT _ (TS _ 9) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Ident           rule  1
	Integer         rule  2
	Program         rule  3
	TopDef          rule  4
	ListTopDef      rules 5, 6
	Arg             rule  7
	ListArg         rules 8, 9, 10
	Stmt            rules 11, 12, 13
	Item            rules 14, 15
	Type            rules 16, 17
	Expr            rules 18, 19, 20, 21
	ListExpr        rules 22, 23, 24
	AddOp           rule  25

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	'global'       shift, and enter state 6

	Program        goto state 3
	TopDef         goto state 4
	ListTopDef     goto state 5

State 1

	Ident -> . L_Ident                                  (rule 1)

	L_Ident        shift, and enter state 2


State 2

	Ident -> L_Ident .                                  (rule 1)

	';'            reduce using rule 1
	'='            reduce using rule 1


State 3

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 4

	ListTopDef -> TopDef .                              (rule 5)
	ListTopDef -> TopDef . ListTopDef                   (rule 6)

	'global'       shift, and enter state 6
	%eof           reduce using rule 5

	TopDef         goto state 4
	ListTopDef     goto state 10

State 5

	Program -> ListTopDef .                             (rule 3)

	%eof           reduce using rule 3


State 6

	TopDef -> 'global' . Type Item ';'                  (rule 4)

	'bool'         shift, and enter state 8
	'int'          shift, and enter state 9

	Type           goto state 7

State 7

	TopDef -> 'global' Type . Item ';'                  (rule 4)

	L_Ident        shift, and enter state 2

	Ident          goto state 11
	Item           goto state 12

State 8

	Type -> 'bool' .                                    (rule 17)

	L_Ident        reduce using rule 17


State 9

	Type -> 'int' .                                     (rule 16)

	L_Ident        reduce using rule 16


State 10

	ListTopDef -> TopDef ListTopDef .                   (rule 6)

	%eof           reduce using rule 6


State 11

	Item -> Ident .                                     (rule 14)
	Item -> Ident . '=' Expr                            (rule 15)

	';'            reduce using rule 14
	'='            shift, and enter state 14


State 12

	TopDef -> 'global' Type Item . ';'                  (rule 4)

	';'            shift, and enter state 13


State 13

	TopDef -> 'global' Type Item ';' .                  (rule 4)

	'global'       reduce using rule 4
	%eof           reduce using rule 4


State 14

	Item -> Ident '=' . Expr                            (rule 15)

	'false'        shift, and enter state 18
	'true'         shift, and enter state 19
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 20

	Ident          goto state 15
	Integer        goto state 16
	Expr           goto state 17

State 15

	Expr -> Ident .                                     (rule 18)

	';'            reduce using rule 18


State 16

	Expr -> Integer .                                   (rule 19)

	';'            reduce using rule 19


State 17

	Item -> Ident '=' Expr .                            (rule 15)

	';'            reduce using rule 15


State 18

	Expr -> 'false' .                                   (rule 21)

	';'            reduce using rule 21


State 19

	Expr -> 'true' .                                    (rule 20)

	';'            reduce using rule 20


State 20

	Integer -> L_integ .                                (rule 2)

	';'            reduce using rule 2


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 26
Number of terminals: 11
Number of non-terminals: 14
Number of states: 21
