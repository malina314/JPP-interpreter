-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParGramatyka
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified AbsGramatyka
import LexGramatyka

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '+'      { PT _ (TS _ 1) }
  ','      { PT _ (TS _ 2) }
  ';'      { PT _ (TS _ 3) }
  '='      { PT _ (TS _ 4) }
  'bool'   { PT _ (TS _ 5) }
  'false'  { PT _ (TS _ 6) }
  'global' { PT _ (TS _ 7) }
  'int'    { PT _ (TS _ 8) }
  'true'   { PT _ (TS _ 9) }
  L_Ident  { PT _ (TV $$)  }
  L_integ  { PT _ (TI $$)  }

%%

Ident :: { AbsGramatyka.Ident }
Ident  : L_Ident { AbsGramatyka.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

Program :: { AbsGramatyka.Program }
Program : ListTopDef { AbsGramatyka.Program $1 }

TopDef :: { AbsGramatyka.TopDef }
TopDef : 'global' Type Item ';' { AbsGramatyka.VarDef $2 $3 }

ListTopDef :: { [AbsGramatyka.TopDef] }
ListTopDef : TopDef { (:[]) $1 } | TopDef ListTopDef { (:) $1 $2 }

Arg :: { AbsGramatyka.Arg }
Arg : Type Ident { AbsGramatyka.Arg $1 $2 }

ListArg :: { [AbsGramatyka.Arg] }
ListArg
  : {- empty -} { [] }
  | Arg { (:[]) $1 }
  | Arg ',' ListArg { (:) $1 $3 }

Stmt :: { AbsGramatyka.Stmt }
Stmt
  : ';' { AbsGramatyka.Empty }
  | Type Item ';' { AbsGramatyka.Decl $1 $2 }
  | Ident '=' Expr ';' { AbsGramatyka.Ass $1 $3 }

Item :: { AbsGramatyka.Item }
Item
  : Ident { AbsGramatyka.NoInit $1 }
  | Ident '=' Expr { AbsGramatyka.Init $1 $3 }

Type :: { AbsGramatyka.Type }
Type : 'int' { AbsGramatyka.Int } | 'bool' { AbsGramatyka.Bool }

Expr :: { AbsGramatyka.Expr }
Expr
  : Ident { AbsGramatyka.EVar $1 }
  | Integer { AbsGramatyka.ELitInt $1 }
  | 'true' { AbsGramatyka.ELitTrue }
  | 'false' { AbsGramatyka.ELitFalse }

ListExpr :: { [AbsGramatyka.Expr] }
ListExpr
  : {- empty -} { [] }
  | Expr { (:[]) $1 }
  | Expr ',' ListExpr { (:) $1 $3 }

AddOp :: { AbsGramatyka.AddOp }
AddOp : '+' { AbsGramatyka.Plus }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

