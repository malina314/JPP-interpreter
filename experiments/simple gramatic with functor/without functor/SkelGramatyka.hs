-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelGramatyka where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsGramatyka

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsGramatyka.Ident -> Result
transIdent x = case x of
  AbsGramatyka.Ident string -> failure x

transProgram :: AbsGramatyka.Program -> Result
transProgram x = case x of
  AbsGramatyka.Program topdefs -> failure x

transTopDef :: AbsGramatyka.TopDef -> Result
transTopDef x = case x of
  AbsGramatyka.VarDef type_ item -> failure x

transArg :: AbsGramatyka.Arg -> Result
transArg x = case x of
  AbsGramatyka.Arg type_ ident -> failure x

transStmt :: AbsGramatyka.Stmt -> Result
transStmt x = case x of
  AbsGramatyka.Empty -> failure x
  AbsGramatyka.Decl type_ item -> failure x
  AbsGramatyka.Ass ident expr -> failure x

transItem :: AbsGramatyka.Item -> Result
transItem x = case x of
  AbsGramatyka.NoInit ident -> failure x
  AbsGramatyka.Init ident expr -> failure x

transType :: AbsGramatyka.Type -> Result
transType x = case x of
  AbsGramatyka.Int -> failure x
  AbsGramatyka.Bool -> failure x

transExpr :: AbsGramatyka.Expr -> Result
transExpr x = case x of
  AbsGramatyka.EVar ident -> failure x
  AbsGramatyka.ELitInt integer -> failure x
  AbsGramatyka.ELitTrue -> failure x
  AbsGramatyka.ELitFalse -> failure x

transAddOp :: AbsGramatyka.AddOp -> Result
transAddOp x = case x of
  AbsGramatyka.Plus -> failure x
