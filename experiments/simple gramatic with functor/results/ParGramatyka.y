-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParGramatyka
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified AbsGramatyka
import LexGramatyka

}

%name pProgram_internal Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '+'      { PT _ (TS _ 1) }
  ','      { PT _ (TS _ 2) }
  ';'      { PT _ (TS _ 3) }
  '='      { PT _ (TS _ 4) }
  'bool'   { PT _ (TS _ 5) }
  'false'  { PT _ (TS _ 6) }
  'global' { PT _ (TS _ 7) }
  'int'    { PT _ (TS _ 8) }
  'true'   { PT _ (TS _ 9) }
  L_Ident  { PT _ (TV _)   }
  L_integ  { PT _ (TI _)   }

%%

Ident :: { (AbsGramatyka.BNFC'Position, AbsGramatyka.Ident) }
Ident  : L_Ident { (uncurry AbsGramatyka.BNFC'Position (tokenLineCol $1), AbsGramatyka.Ident (tokenText $1)) }

Integer :: { (AbsGramatyka.BNFC'Position, Integer) }
Integer  : L_integ  { (uncurry AbsGramatyka.BNFC'Position (tokenLineCol $1), (read (tokenText $1)) :: Integer) }

Program :: { (AbsGramatyka.BNFC'Position, AbsGramatyka.Program) }
Program
  : ListTopDef { (fst $1, AbsGramatyka.Program (fst $1) (snd $1)) }

TopDef :: { (AbsGramatyka.BNFC'Position, AbsGramatyka.TopDef) }
TopDef
  : 'global' Type Item ';' { (uncurry AbsGramatyka.BNFC'Position (tokenLineCol $1), AbsGramatyka.VarDef (uncurry AbsGramatyka.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }

ListTopDef :: { (AbsGramatyka.BNFC'Position, [AbsGramatyka.TopDef]) }
ListTopDef
  : TopDef { (fst $1, (:[]) (snd $1)) }
  | TopDef ListTopDef { (fst $1, (:) (snd $1) (snd $2)) }

Arg :: { (AbsGramatyka.BNFC'Position, AbsGramatyka.Arg) }
Arg
  : Type Ident { (fst $1, AbsGramatyka.Arg (fst $1) (snd $1) (snd $2)) }

ListArg :: { (AbsGramatyka.BNFC'Position, [AbsGramatyka.Arg]) }
ListArg
  : {- empty -} { (AbsGramatyka.BNFC'NoPosition, []) }
  | Arg { (fst $1, (:[]) (snd $1)) }
  | Arg ',' ListArg { (fst $1, (:) (snd $1) (snd $3)) }

Stmt :: { (AbsGramatyka.BNFC'Position, AbsGramatyka.Stmt) }
Stmt
  : ';' { (uncurry AbsGramatyka.BNFC'Position (tokenLineCol $1), AbsGramatyka.Empty (uncurry AbsGramatyka.BNFC'Position (tokenLineCol $1))) }
  | Type Item ';' { (fst $1, AbsGramatyka.Decl (fst $1) (snd $1) (snd $2)) }
  | Ident '=' Expr ';' { (fst $1, AbsGramatyka.Ass (fst $1) (snd $1) (snd $3)) }

Item :: { (AbsGramatyka.BNFC'Position, AbsGramatyka.Item) }
Item
  : Ident { (fst $1, AbsGramatyka.NoInit (fst $1) (snd $1)) }
  | Ident '=' Expr { (fst $1, AbsGramatyka.Init (fst $1) (snd $1) (snd $3)) }

Type :: { (AbsGramatyka.BNFC'Position, AbsGramatyka.Type) }
Type
  : 'int' { (uncurry AbsGramatyka.BNFC'Position (tokenLineCol $1), AbsGramatyka.Int (uncurry AbsGramatyka.BNFC'Position (tokenLineCol $1))) }
  | 'bool' { (uncurry AbsGramatyka.BNFC'Position (tokenLineCol $1), AbsGramatyka.Bool (uncurry AbsGramatyka.BNFC'Position (tokenLineCol $1))) }

Expr :: { (AbsGramatyka.BNFC'Position, AbsGramatyka.Expr) }
Expr
  : Ident { (fst $1, AbsGramatyka.EVar (fst $1) (snd $1)) }
  | Integer { (fst $1, AbsGramatyka.ELitInt (fst $1) (snd $1)) }
  | 'true' { (uncurry AbsGramatyka.BNFC'Position (tokenLineCol $1), AbsGramatyka.ELitTrue (uncurry AbsGramatyka.BNFC'Position (tokenLineCol $1))) }
  | 'false' { (uncurry AbsGramatyka.BNFC'Position (tokenLineCol $1), AbsGramatyka.ELitFalse (uncurry AbsGramatyka.BNFC'Position (tokenLineCol $1))) }

ListExpr :: { (AbsGramatyka.BNFC'Position, [AbsGramatyka.Expr]) }
ListExpr
  : {- empty -} { (AbsGramatyka.BNFC'NoPosition, []) }
  | Expr { (fst $1, (:[]) (snd $1)) }
  | Expr ',' ListExpr { (fst $1, (:) (snd $1) (snd $3)) }

AddOp :: { (AbsGramatyka.BNFC'Position, AbsGramatyka.AddOp) }
AddOp
  : '+' { (uncurry AbsGramatyka.BNFC'Position (tokenLineCol $1), AbsGramatyka.Plus (uncurry AbsGramatyka.BNFC'Position (tokenLineCol $1))) }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

-- Entrypoints

pProgram :: [Token] -> Err AbsGramatyka.Program
pProgram = fmap snd . pProgram_internal
}

